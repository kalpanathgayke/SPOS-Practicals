            Assignment No :- 05
// Assignment Based on process synchronization - Dining Philosophers Problem

#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include<sys/types.h>
//global declaration
pthread_mutex_t work_mutex[5];//chopsticks 
void *philosopher1();// declare thread function philosopher1
void *philosopher2();
void *philosopher3();
void *philosopher4();
void *philosopher5();
int main(){
	//local declaration
	pthread_t ph1,ph2,ph3,ph4,ph5;//thread variables
	pthread_create(&ph1,NULL,philosopher1,NULL);
	pthread_create(&ph2,NULL,philosopher2,NULL);
	pthread_create(&ph3,NULL,philosopher3,NULL);
	pthread_create(&ph4,NULL,philosopher4,NULL);
	pthread_create(&ph5,NULL,philosopher5,NULL);
	pthread_join(ph1,NULL);
	pthread_join(ph2,NULL);
	pthread_join(ph3,NULL);
	pthread_join(ph4,NULL);
	pthread_join(ph5,NULL);
	pthread_mutex_init(&work_mutex[0],NULL);
	pthread_mutex_init(&work_mutex[1],NULL);
	pthread_mutex_init(&work_mutex[2],NULL);
	pthread_mutex_init(&work_mutex[3],NULL);
	pthread_mutex_init(&work_mutex[4],NULL);
	return 0;
}
//define thread function
void *philosopher1(){
	while(1){
		pthread_mutex_lock(&work_mutex[4]);
		pthread_mutex_lock(&work_mutex[0]);
		printf("philosopher1 is eating\n");
		sleep(3);
		pthread_mutex_unlock(&work_mutex[4]);
		pthread_mutex_unlock(&work_mutex[0]);
		printf("philosopher1 has release chopstick 4 and 0\n");
		printf("philosopher1 is thinking\n");
	}
	pthread_exit(0);
}
void *philosopher2(){
	while(1){
		pthread_mutex_lock(&work_mutex[0]);
		pthread_mutex_lock(&work_mutex[1]);
		printf("philosopher2 is eating\n");
		sleep(3);
		pthread_mutex_unlock(&work_mutex[0]);
		pthread_mutex_unlock(&work_mutex[1]);
		printf("philosopher2 has release chopstick 0 and 1\n");
		printf("philosopher2 is thinking\n");
	}
	pthread_exit(0);
}
void *philosopher3(){
	while(1){
		pthread_mutex_lock(&work_mutex[1]);
		pthread_mutex_lock(&work_mutex[2]);
		printf("philosopher3 is eating\n");
		sleep(3);
		pthread_mutex_unlock(&work_mutex[1]);
		pthread_mutex_unlock(&work_mutex[2]);
		printf("philosopher3 has release chopstick 1 and 2\n");
		printf("philosopher3 is thinking\n");
	}
	pthread_exit(0);
}
void *philosopher4(){
	while(1){
		pthread_mutex_lock(&work_mutex[2]);
		pthread_mutex_lock(&work_mutex[3]);
		printf("philosopher4 is eating\n");
		sleep(3);
		pthread_mutex_unlock(&work_mutex[2]);
		pthread_mutex_unlock(&work_mutex[3]);
		printf("philosopher4 has release chopstick 2 and 3\n");
		printf("philosopher4 is thinking\n");
	}
	pthread_exit(0);
}
void *philosopher5(){
	while(1){
		pthread_mutex_lock(&work_mutex[3]);
		pthread_mutex_lock(&work_mutex[4]);
		printf("philosopher5 is eating\n");
		sleep(3);
		pthread_mutex_unlock(&work_mutex[3]);
		pthread_mutex_unlock(&work_mutex[4]);
		printf("philosopher5 has release chopstick 3 and 4\n");
		printf("philosopher5 is thinking\n");
	}
	pthread_exit(0);
}
